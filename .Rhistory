print("IG Downloading...")
# Create directory if not there
createOutputDirectory(sourceDir,"downloads")
# Reads from phuse github biocelerate location
base <- "https://github.com/phuse-org/BioCelerate/tree/master/metadata"
path <- paste0(base, IGFile)
CTxl <- paste0(IGDownloadsDir,IGFile)
print(paste0("Downloading the IG file... ",path))
GET(path, write_disk(CTxl),timeout(40))
}
df <- readWorksheet(loadWorkbook(paste0(IGDownloadsDir, IGFile)), sheet = "SENDIG 3.1 Variables")
dfSENDIG <<- df
bSENDIGRead <<- TRUE
}
}
# This function checks columns to verify if the column needs to be included
# based upon the columns core requirement. Returns a logical vector. TRUE
# if it should be included, FALSE otherwise
# TODO: This isn't very effiecent
checkCore <- function(dataset) {
# Create TF vector for permisable columns
domain_i <- unique(dataset$DOMAIN)
cores <- dfSENDIG[dfSENDIG$Domain == domain_i, "Expectancy"]
isPerm <- cores == "Perm"
# Create TF vector for blank cols
blankCol <- apply(dataset, 2, function(x) all(is.na(x)))
# Return vector where both conditions are true.
!(isPerm & blankCol)
}
# Reset within the dataframe as numeric columns that should be numeric
setSENDNumeric <- function(dataset) {
domain_i <- unique(dataset$DOMAIN)
numerics <- dfSENDIG[dfSENDIG$Domain == domain_i & dfSENDIG$Type=="Num", "Column"]
numerics <- intersect(numerics,names(dataset))
printDebug(paste(" In setSENDNumeric set numeric for these variables",numerics))
if (length(numerics)>1) {
dataset[numerics] <- suppressWarnings(sapply(dataset[numerics],as.numeric))
} else {
dataset[numerics] <- as.numeric(dataset[[numerics]])
printDebug(paste(" In setSENDNumeric",class(dataset[[numerics]])))
}
dataset
}
createOutputDirectory <- function (aDir,aStudy) {
setwd(aDir)
if (file.exists(aStudy)){
setwd(file.path(aDir, aStudy))
} else {
dir.create(file.path(aDir, aStudy))
setwd(file.path(aDir, aStudy))
}
}
sleepSeconds <- function(x)
{
p1 <- proc.time()
Sys.sleep(x)
proc.time() - p1 # The cpu usage should be negligible
}
bSENDIGRead
bSENDIGRead <<- FALSE
bSENDIGRead
SENDIG
dfSENDIG
remove(dfSENDIG)
dfSENDIG
readDomainStructures()
df <- readWorksheet(loadWorkbook(paste0(IGDownloadsDir, IGFile)), sheet = "SENDIG 3.1 Variables")
readDomainStructures()
IGFile <- "sendig-3-1-excel.xls"
IGDownloadsDir <- paste0(sourceDir, "/downloads/")
e
IGFile <- "sendig-3-1-excel.xls"
IGDownloadsDir <- paste0(sourceDir, "/downloads/")
df <- readWorksheet(loadWorkbook(paste0(IGDownloadsDir, IGFile)), sheet = "SENDIG 3.1 Variables")
paste0(IGDownloadsDir, IGFile))
paste0(IGDownloadsDir, IGFile)
loadWorkbook(paste0(IGDownloadsDir, IGFile))
loadWorkbook(paste0(IGDownloadsDir, IGFile))
library("XLConnect")
loadWorkbook(paste0(IGDownloadsDir, IGFile))
readDomainStructures()
exit
quit
stop
stop
exit
readDomainStructures()
readDomainStructures()
library(shiny); runApp('~/SEND-TestDataFactory/SendDataFactory.R')
dfSENDIG
bSENDIGRead
readDomainStructures()
bSENDIGRead
dfSENDIG
labels(readDomainStructures)
dfSENDIG
head(dfSENDIG)
cols(dfSENDIG)
ncol(dfSENDIG)
dfSENDIG$Type
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
bSENDIGremove())
remoev
remove(dfSENDIG)
remove(bSENDIGRead)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
labels(dfSEND)
labels(dfSENDIG)
labels(dfSENDIG)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
readDomainStructures()
df
readDomainStructures()
labels(df)
labels(df)
n
readDomainStructures()
labels(df)
readDomainStructures()
readDomainStructures()
readDomainStructures()
Q
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
remove(dfSENDIG)
remove(bSENDIGRead)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
setSENDNumeric(bwOut)
domain_i
numerics
remove(bSENDIGRead)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
dfSENDIG[dfSENDIG$Domain == domain_i & dfSENDIG$Type=="Num", "Column"]
domain_i <- "BW"
dfSENDIG[dfSENDIG$Domain == domain_i & dfSENDIG$Type=="Num", "Column"]
numerics <- dfSENDIG[dfSENDIG$Domain == domain_i & dfSENDIG$Type=="Num", "Column"]
numerics <- intersect(numerics,names(dataset))
dataset <- BWOut
dataset <- bwOut
numerics <- dfSENDIG[dfSENDIG$Domain == domain_i & dfSENDIG$Type=="Num", "Column"]
numerics <- intersect(numerics,names(dataset))
numerics
class(bwOut$STUDYID)
class(bwOut$BWDY)
class(bwOut$BWNOMDY)
labels(aDFReturned)
labels(aDFReturned)[2]
labels(aDFReturned)[1]
labels(aDFReturned)[2]
aDescription <- dfSENDIG[dfSENDIG$Column==aColumn,]$Label
aColumn <- BWNOMLBL
aColumn <- "BWNOMLBL"
aDescription <- dfSENDIG[dfSENDIG$Column==aColumn,]$Label
aDescription
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
theColumns <- labels(aDFReturned)[2]
index <- 1
for (aColumn in theColumns) {
aDescription <- dfSENDIG[dfSENDIG$Column==aColumn,]$Label
Hmisc::label(aDFReturned$aColumn) <<- aDescription
index <- index + 1
}
aDFReturned <- bwOut
theColumns <- labels(aDFReturned)[2]
index <- 1
for (aColumn in theColumns) {
aDescription <- dfSENDIG[dfSENDIG$Column==aColumn,]$Label
Hmisc::label(aDFReturned$aColumn) <<- aDescription
index <- index + 1
}
aDFReturned
theColumns <- labels(aDFReturned)[2]
index <- 1
for (aColumn in theColumns) {
aDescription <- dfSENDIG[dfSENDIG$Column==aColumn,]$Label
Hmisc::label(aDFReturned$aColumn) <<- aDescription
index <- index + 1
}
labels(aDFReturned)[2]
aDFReturned$aColumn
aColumn
theColumns
length(theColumns)
theColumns
ncol(theColumns)
class(theColumns)
size(list())
size(theColumns)
dataList=list("Hello", c("USA", "Red", "100"), c("India", "Blue", "76"))
for(i in dataList){print(i)}
dataList=list("Hello", c(theColumns)
for(i in dataList){print(i)}
dataList=list("Hello", c(theColumns)
for(i in dataList){print(i)}
dataList=list("Hello", c(theColumns))
for(i in dataList){print(i)}
class(theColumns)
for(i in theColumns){for(j in i){print(j)}}
for(i in theColumns){for(j in i){print(j)}}
theColumns <- labels(aDFReturned)[2]
index <- 1
for (i in theColumns) {
for(aColumn in i){
aDescription <- dfSENDIG[dfSENDIG$Column==aColumn,]$Label
Hmisc::label(aDFReturned$aColumn) <<- aDescription
index <- index + 1
}
}
aColumn
aDFReturned$aColumn
aDescription
dfSENDIG[dfSENDIG$Column==aColumn && dfSENDIG$Domain==aDomain,]$Label
aDomain <- "BW"
dfSENDIG[dfSENDIG$Column==aColumn && dfSENDIG$Domain==aDomain,]$Label
dfSENDIG[dfSENDIG$Column==aColumn & dfSENDIG$Domain==aDomain,]$Label
aDFReturned$aColumn
aDFReturned$[aColumn]
aDFReturned$[[aColumn]]
aDFReturned[,aColumn]
aDFReturned[,aColumn]
for (i in theColumns) {
for(aColumn in i){
aDescription <- dfSENDIG[dfSENDIG$Column==aColumn & dfSENDIG$Domain==aDomain,]$Label
Hmisc::label(aDFReturned[,aColumn]) <<- aDescription
}
}
Hmisc::label(aDFReturned[,aColumn]) <<- aDescription
aDFReturned
Hmisc::label(aDFReturned[,aColumn]) <<- aDescription
Hmisc::label(aDFReturned[,aColumn]) <- aDescription
Hmisc::label(aDFReturned[,aColumn])
Hmisc::label(aDFReturned)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
numerics
head(bwOut)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
setSENDNumeric(bwOut)
length(numerics)
length(numerics)
dataset[numerics] <- suppressWarnings(sapply(dataset[numerics],as.numeric))
printDebug(paste(" In setSENDNumeric",class(dataset[[numerics]])))
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
setLabels("BW",bwOut)
# set description labels for each field
setLabels <- function(theDomain, theDataset) {
printDebug(paste("             In setLabels"))
theColumns <- labels(theDataset)[2]
printDebug(paste("             In setLabels, columns are",theColumns))
for (i in theColumns) {
for(aColumn in i){
aDescription <- dfSENDIG[dfSENDIG$Column==aColumn & dfSENDIG$Domain==theDomain,]$Label
Hmisc::label(theDataset[,aColumn]) <- aDescription
printDebug(paste("             In setLabels",aColumn,aDescription))
}
}
theDataset
}
setLabels("BW",bwOut)
Hmisc::label(theDataset)
Hmisc::label(bwOut)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
anAge <-as.character((TSFromFile[TSFromFile$TSPARMCD=="AGETXT",]$TSVAL))
anAge
anAgeUnit <-as.character((TSFromFile[TSFromFile$TSPARMCD=="AGEU",]$TSVAL))
anAgeUnit
str_trim(anAgeUnit)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
removeColumns <- function(theDataSet) {
# if all NA, remove empty columns
emptycols <- sapply(theDataSet, function (k) all(is.na(k)))
df <- df[!emptycols]
}
head(bwOut)
head(bwOut)
removeColumns(bwOut)
removeColumns <- function(theDataSet) {
# if all NA, remove empty columns
emptycols <- sapply(theDataSet, function (k) all(is.na(k)))
theDataSet <- theDataSet[!emptycols]
theDataSet
}
removeColumns(bwOut)
bwOut <- removeColumns(bwOut)
head(bwOut)
bwOut _<- removeColumns(bwOut)
bwOut <<- removeColumns(bwOut)
bwOut <- removeColumns(bwOut)
bwOut <<- removeColumns(bwOut)
head(bwOut)
head(clOut)
bwOut <<- removeColumns(clOut)
clOut <<- removeColumns(clOut)
head(clOut)
clOut$CLSTAT
removeColumns <- function(theDataSet) {
# if all NA, remove empty columns
theDataSet[theDataSet=="NA"] <- ""
emptycols <- sapply(theDataSet, function (k) all(is.na(k)))
theDataSet <- theDataSet[!emptycols]
theDataSet
}
clOut <<- removeColumns(clOut)
head(clOut)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
setSENDNumeric(dsOut)
setSENDNumeric(dfOut)
setDSFile()
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
bwOut
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
round(aValue, digits=4)
avalue <- 2
avalue
avalue <- 2+3
avalue
tsOut
dmOut
head(dmOut)
bwOut
labels(bwOut)
hmisc:label(bwOut)
hmisc::label(bwOut)
Hmisc::label(bwOut)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
head(dsOut)
dsOut <<- setLabels (aDomain, tOut)
dsOut <<- setLabels ("DS", tOut)
dsOut <<- setLabels ("DS", dsOut)
head(dsOut)
dsOut <<- setLabels ("DS", dsOut)
tOut <<- dsOut
tOut <<- removeColumns(tOut)
tOut <<- setSENDNumeric(tOut)
printDebug(paste("Now setting DS labels"))
# set labels for each field
dsOut <<- setLabels (aDomain, tOut)
head(dsOut)
tOut <<- removeColumns(tOut)
tOut <<- setSENDNumeric(tOut)
printDebug(paste("Now setting DS labels"))
# set labels for each field
dsOut <<- setLabels (aDomain, tOut)
dsOut <<- setLabels (aDomain, tOut)
aDomain
aDomain <- "DS"
dsOut <<- setLabels (aDomain, tOut)
head(dsOut)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
head(taOut)
head(taOut armcd_i <- dmOut[dmOut$USUBJID == animal_i, "ARMCD"])
armcd_i <- dmOut[dmOut$USUBJID == animal_i, "ARMCD"]
armcd_i <- dmOut[dmOut$USUBJID == "MyStudy-1M1", "ARMCD"]
armcd_i
armcd_i <- dmOut[dmOut$USUBJID == "MyStudy-1M1", "ARM"]
armcd_i
TSFromFile[TSFromFile$TSPARMCD == "ROUTE", "TSVAL"]
as.character(TSFromFile[TSFromFile$TSPARMCD == "ROUTE", "TSVAL"])
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
as.character(TSFromFile[TSFromFile$TSPARMCD == "ROUTE
if (exists("bwOut")) {
removeTab(inputId = "navDatasets",target = "BW")
insertTab(inputId = "navDatasets",
tabPanel("BW",tableOutput("showBW")),
position = 'after',
target = "TS"
)
}
exOut
library(shiny); runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
class(seOut$SESEQ)
class(seOut$DOMAIN)
class(seOut$SESEQ)
seOut$SESEQ
seOut$SESEQ[1]
seOut$SESEQ[2]
seOut$SESEQ[3]
seOut$SESEQ[4]
class(seOut$SESEQ[1])
class(seOut$SESEQ)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
class(seOut$SESEQ)
class(seOut$SESEq)
class(seOut$SESEQ)
labels(stOut)
labels(seOut)
class(seOut$STUDYID)
class(seOut$DOMAIN)
class(seOut$USUBJID)
class(seOut$ETCD)
class(seOut$SESTDTC)
class(seOut$SEENDTC)
class(seOut$SEUPDES)
dataset[numerics] <- suppressWarnings(sapply(dataset[numerics],as.numeric))
dataset[numerics] <- suppressWarnings(sapply(dataset[numerics],as.numeric))
dataset <- seOut
dataset[numerics] <- suppressWarnings(sapply(dataset[numerics],as.numeric))
numerics <- c("SESEQ")
dataset[numerics] <- suppressWarnings(sapply(dataset[numerics],as.numeric))
dataset[numerics] <- (sapply(dataset[numerics],as.numeric)
)
dataset[numerics] <- sapply(dataset[numerics],as.numeric)
class(seOut$SESEQ)
numerics
dataset[numerics] <- sapply(dataset[numerics],as.numeric)
as.numeroc(seOut$SESEQ)
as.numeric(seOut$SESEQ)
class(as.numeric(seOut$SESEQ))
seOut <<- setSENDNumeric(seOut)
class(seOut$SESEQ)
labels(bwOut)
labels(seOut)
class(as.numeric(seOut$DOMAIN))
class(as.numeric(seOut$SESEQ))
class(seOut$SESEQ)
seOut
remove(seOut)
remove(seOut)
remove(seOut)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
class(seOut$SESEQ)
class(seOut$BWSEQ)
class(bwOut$BWSEQ)
Hmisc::label(bwOut)
Hmisc::label(seOut)
tOut <- seOut
class(seOut$SESEQ)
tOut$SESEQ <<- 1:nrow(aDataset)
tOut <<- setSENDNumeric(tOut)
tOut$SESEQ <<- 1:nrow(tOut)
tOut <<- setSENDNumeric(tOut)
head(tOut)
tOut$SESEQ <<- 1:nrow(tOut)
nrow(tOut)
1:nrow(tOut)
tOut$SESEQ <<- 1:nrow(tOut)
tOut$SESEQ <<- 1:nrow(tOut)
tOutCopy <- tOut
tOut$SESEQ <<- 1:nrow(tOutCopy)
tOut <<- setSENDNumeric(tOut)
tOut$SESEQ <<- 1:nrow(tOutCopy)
tOut$SESEQ
tOut$SESEQ <<- 1:nrow(tOutCopy)
tOut$SESEQ <<- 3
tOut$SESEQ <- 3
remove(tOut)
tOut <<- seOut
tOut$SESEQ <<- 1:nrow(tOut)
tOut$SESEQ
tOut$SESEQ <<- 1:nrow(tOut)
tOut$SESEQ <- 1:nrow(tOut)
remove(tOut)
remove(tOut)
tOut$SESEQ <- 1:nrow(tOut)
tOut <<- seOut
tOut$SESEQ <- 1:nrow(tOut)
class(tout$SESEQ)
class(tOut$SESEQ)
tOut <<- setSENDNumeric(tOut)
class(tOut$SESEQ)
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
theArm <- dmOut[dmOut$USUBJID == animal_i, "ARM"]
dmOut$USUBJID
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
runApp('~/SEND-TestDataFactory/SendDataFactory.R')
